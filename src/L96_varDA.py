#!/usr/bin/env python

###############################################################
# < next few lines under version control, D O  N O T  E D I T >
# $Date$
# $Revision$
# $Author$
# $Id$
###############################################################

###############################################################
# L96_varDA.py - cycle variational DA on Lorenz & Emanuel 1998
###############################################################

###############################################################
__author__    = "Rahul Mahajan"
__email__     = "rahul.mahajan@nasa.gov"
__copyright__ = "Copyright 2012, NASA / GSFC / GMAO"
__license__   = "GPL"
__status__    = "Prototype"
###############################################################

###############################################################
import sys
import numpy         as     np
from   scipy         import integrate, io
from   matplotlib    import pyplot
from   netCDF4       import Dataset
from   module_Lorenz import L96, plot_L96, get_IC
from   module_DA     import *
from   module_IO     import *
from   plot_stats    import *
###############################################################

###############################################################
global model
global A, Q, H, R
global nassim, ntimes, dt, t0
global Vupdate, minimization
global diag_fname, diag_fattr
global restart_state, restart_file

model      = type('',(),{})  # model Class
model.Name = 'L96'           # model name
model.Ndof = 40              # model degrees of freedom
model.Par  = [8.0, 0.4]      # model parameters F, dF

A = np.eye(Ndof)             # initial analysis error covariance
Q = np.eye(Ndof)*0.0         # model error covariance ( covariance model is white for now)
H = np.eye(Ndof)             # obs operator ( eye(Ndof) gives identity obs )
R = np.eye(Ndof)*(1.0**2)    # observation error covariance

nassim = 2000                # no. of assimilation cycles
dt     = 1.0e-4              # time-step
ntimes = 0.05                # do assimilation every ntimes non-dimensional time units
t0     = 0.0                 # initial time

Vupdate = 1                  # DA method (1= 3Dvar; 2= 4Dvar)
maxiter = 1000               # maximum iterations
alpha   = 4e-4               # size of step in direction of normalized J
cg      = True               # True = Use conjugate gradient; False = Perform line search
minimization = [maxiter, alpha, cg]

# name and attributes of/in the output diagnostic file
diag_fname = 'L96_varDA_diag.nc4'
diag_fattr = {'F'           : str(model.Par[0]),
              'dF'          : str(model.Par[1]),
              'ntimes'      : str(ntimes),
              'dt'          : str(dt),
              'Vupdate'     : str(Vupdate),
              'maxiter'     : str(maxiter),
              'alpha'       : str(alpha),
              'cg'          : str(int(cg))}

# restart conditions ( state [< -1 | == -1 | > -1], filename)
restart_state = -1
restart_file  = 'L96_varDA_diag.nc4'
###############################################################

###############################################################
def main():

    # insure the same sequence of random numbers EVERY TIME
    np.random.seed(0)

    # check for valid variational data assimilation options
    check_varDA(Vupdate)

    # get IC's
    [xt, xa] = get_IC(model=model, restart_state=restart_state, restart_file=restart_file)
    xb = xa.copy()

    # load fixed background error covariance matrix; generated by L96_stats.py and compute inverse
    nc = Dataset('L96_climo_B.nc4','r')
    Bc = nc.variables['B'][:]
    nc.close()

    print 'Cycling ON the attractor ...'

    ts = np.arange(t0,ntimes+dt,dt)     # time between assimilations

    # create diagnostic file
    create_diag(diag_fname, diag_fattr, model.Ndof)
    write_diag(diag_fname, 0, xt, xb, xa, np.dot(H,xt), H, np.diag(R), niters=np.NaN)

    for k in range(0, nassim):

        print '========== assimilation time = %5d ========== ' % (k+1)

        # advance truth with the full nonlinear model
        xs = integrate.odeint(L96, xt, ts, (model.Par[0],0.0))
        xt = xs[-1,:].copy()

        # new observations from noise about truth; set verification values
        y   = np.dot(H,xt) + np.random.randn(model.Ndof) * np.sqrt(np.diag(R))
        ver = xt.copy()

        # step to the next assimilation time
        xs = integrate.odeint(L96, xa, ts, (model.Par[0]+model.Par[1],0.0))
        xb = xs[-1,:].copy()

        # update step
        xa, A, niters = update_varDA(xb, Bc, y, R, H, Vupdate=Vupdate, minimization=minimization)

        # write diagnostics to disk
        write_diag(diag_fname, k+1, ver, xb, xa, y, H, np.diag(R), niters=niters)

    print '... all done ...'
    sys.exit(0)
###############################################################

###############################################################
if __name__ == "__main__":
	main()
###############################################################
